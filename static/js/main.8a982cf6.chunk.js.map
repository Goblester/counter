{"version":3,"sources":["redux/counterActions.ts","components/SuperButton/SuperButton.tsx","components/CounterWithSettings/CounterWithSettings.tsx","components/SuperInputText/SuperInputText.tsx","components/Settings/Settings.tsx","components/CounterWithSettings/CounterWithSettingsContainer.tsx","App.tsx","reportWebVitals.ts","redux/counterReducer.ts","redux/state.ts","utilits/localStorage-utilits.ts","index.tsx","components/SuperButton/SuperButton.module.css","components/SuperInputText/SuperInputText.module.css","components/Counter/Counter.module.css","components/Settings/Settings.module.css"],"names":["ACTIONS_TYPE","SuperButton","className","restProps","CounterWithSettings","props","currentValue","maxValue","startValue","increaseValue","resetValue","onEditorMode","valueIsMax","valueIsZero","valueClassName","styles","valueField","increaseButtonClassName","buttonStyles","disabled","default","resetButtonClassName","setButtonClassName","container","buttons","children","onClick","changeEditMode","editMode","type","CHANGE_EDIT_MODE","payload","setError","error","SET_ERROR","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","spanClassName","finalInputClassName","errorField","e","currentTarget","value","key","Settings","offEditorMode","onChangeLimitValues","hasError","label","indexOf","min","inputStyles","formField","data-value","CounterWithSettingsContainer","useSelector","state","counter","dispatch","useDispatch","Fragment","newStartValue","newMaxValue","dataset","SET_LIMIT_VALUES","setLimitValues","INCREASE_CURRENT_VALUE","NULLIFY_CURRENT_VALUE","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.8a982cf6.chunk.js","sourcesContent":["enum ACTIONS_TYPE {\r\n    INCREASE_CURRENT_VALUE = 'counter/INCREASE_CURRENT_VALUE',\r\n    NULLIFY_CURRENT_VALUE = 'counter/NULLIFY_CURRENT_VALUE',\r\n    CHANGE_EDIT_MODE = 'counter/CHANGE_EDIT_MODE',\r\n    SET_LIMIT_VALUES = 'counter/SET_LIMIT_VALUES',\r\n    SET_ERROR = 'counter/SET_ERROR'\r\n}\r\n\r\nexport type IncreaseCurrentValue = {\r\n    type: typeof ACTIONS_TYPE.INCREASE_CURRENT_VALUE\r\n}\r\n\r\nexport type NullifyCurrentValue = {\r\n    type: typeof ACTIONS_TYPE.NULLIFY_CURRENT_VALUE\r\n}\r\n\r\nexport type ChangeEditMode = {\r\n    type: typeof ACTIONS_TYPE.CHANGE_EDIT_MODE,\r\n    payload: {\r\n        editMode: boolean\r\n    }\r\n}\r\nexport type SetLimitValues = {\r\n    type: typeof ACTIONS_TYPE.SET_LIMIT_VALUES,\r\n    payload: {\r\n        startValue: number\r\n        maxValue: number\r\n    }\r\n}\r\nexport type SetError = {\r\n    type: typeof ACTIONS_TYPE.SET_ERROR,\r\n    payload: {\r\n        error: string | undefined\r\n    }\r\n}\r\n\r\nexport const increaseCurrentValue = (): IncreaseCurrentValue => ({\r\n    type: ACTIONS_TYPE.INCREASE_CURRENT_VALUE\r\n});\r\n\r\nexport const nullifyCurrentValue = (): NullifyCurrentValue => ({\r\n    type: ACTIONS_TYPE.NULLIFY_CURRENT_VALUE\r\n});\r\n\r\nexport const changeEditMode = (editMode: boolean): ChangeEditMode => ({\r\n    type: ACTIONS_TYPE.CHANGE_EDIT_MODE,\r\n    payload: {\r\n        editMode\r\n    }\r\n});\r\n\r\nexport const setLimitValues = (startValue: number, maxValue: number): SetLimitValues => ({\r\n    type: ACTIONS_TYPE.SET_LIMIT_VALUES,\r\n    payload: {\r\n        startValue,\r\n        maxValue\r\n    }\r\n});\r\n\r\nexport const setError = (error: string | undefined): SetError => ({\r\n    type: ACTIONS_TYPE.SET_ERROR,\r\n    payload: {\r\n        error\r\n    }\r\n})\r\n\r\nexport type CounterActionsType = IncreaseCurrentValue\r\n    | NullifyCurrentValue\r\n    | ChangeEditMode\r\n    | SetLimitValues\r\n    | SetError;","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {className, ...restProps}) => {\r\n\r\n    return (\r\n        <button\r\n            className={className}\r\n            {...restProps}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import styles from '../Counter/Counter.module.css';\r\nimport SuperButton from '../SuperButton/SuperButton';\r\nimport buttonStyles from '../SuperButton/SuperButton.module.css';\r\nimport React from 'react';\r\n\r\ntype CounterWithSettingsPropsType = {\r\n    currentValue: number,\r\n    maxValue: number,\r\n    startValue: number,\r\n    increaseValue: () => void,\r\n    resetValue: () => void,\r\n    onEditorMode: () => void\r\n}\r\n\r\nexport function CounterWithSettings(props: CounterWithSettingsPropsType) {\r\n    const {\r\n        currentValue,\r\n        maxValue,\r\n        startValue,\r\n        increaseValue,\r\n        resetValue,\r\n        onEditorMode\r\n    } = props;\r\n\r\n    const valueIsMax = currentValue === maxValue;\r\n    const valueIsZero = currentValue === startValue;\r\n    const valueClassName = `${styles.valueField} ${valueIsMax ? styles.maxValue : ''}`;\r\n    const increaseButtonClassName = `${valueIsMax ? buttonStyles.disabled : buttonStyles.default}`;\r\n    const resetButtonClassName = `${valueIsZero ? buttonStyles.disabled : buttonStyles.default}`;\r\n    const setButtonClassName = `${buttonStyles.default}`;\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={valueClassName}>\r\n                {currentValue}\r\n            </div>\r\n            <div className={styles.buttons}>\r\n                <SuperButton children={'inc'} onClick={increaseValue} disabled={valueIsMax}\r\n                             className={increaseButtonClassName}/>\r\n                <SuperButton children={'reset'} onClick={resetValue} disabled={valueIsZero}\r\n                             className={resetButtonClassName}/>\r\n                <SuperButton children={'set'} onClick={onEditorMode}\r\n                             className={setButtonClassName}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport styles from './SuperInputText.module.css';\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: boolean\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange\r\n        && onChange(e)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter\r\n        && e.key === 'Enter'\r\n        && onEnter()\r\n    }\r\n\r\n    const finalInputClassName = `${error ? styles.errorField : className}`;\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                {...restProps}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText","import SuperInputText from '../SuperInputText/SuperInputText';\r\nimport SuperButton from '../SuperButton/SuperButton';\r\nimport {ChangeEvent} from 'react';\r\nimport styles from './Settings.module.css';\r\nimport buttonStyles from '../SuperButton/SuperButton.module.css';\r\nimport inputStyles from '../SuperInputText/SuperInputText.module.css'\r\n\r\ntype SettingsPropsType = {\r\n    startValue: number\r\n    maxValue: number\r\n    error: string | undefined\r\n    offEditorMode: () => void\r\n    onChangeLimitValues: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport function Settings(props: SettingsPropsType) {\r\n    const {\r\n        error,\r\n        maxValue,\r\n        startValue,\r\n        offEditorMode,\r\n        onChangeLimitValues\r\n    } = props\r\n    const hasError = !!error ? true : false;\r\n    const setButtonClassName = `${hasError ? buttonStyles.disabled : buttonStyles.default}`\r\n    return (\r\n        <div className={styles.container}>\r\n            <div>\r\n                <span className={styles.label}>max Value: </span>\r\n                <SuperInputText type={'number'}\r\n                                error={error?.indexOf('maxValue') !== -1}\r\n                                min={-1}\r\n                                value={maxValue}\r\n                                onChange={onChangeLimitValues}\r\n                                className={inputStyles.formField}\r\n                                data-value={'maxValue'}/>\r\n            </div>\r\n            <div>\r\n                <span className={styles.label}>start Value: </span>\r\n                <SuperInputText type={'number'}\r\n                                error={error?.indexOf('start') !== -1}\r\n                                min={-1}\r\n                                value={startValue}\r\n                                onChange={onChangeLimitValues}\r\n                                className={inputStyles.formField}\r\n                                data-value={'startValue'}/>\r\n            </div>\r\n            <SuperButton children={'set'}\r\n                         onClick={offEditorMode}\r\n                         disabled={hasError}\r\n                         className={setButtonClassName}/>\r\n\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {IGlobalState} from '../../redux/state';\r\nimport {CounterWithSettings} from './CounterWithSettings';\r\nimport {Dispatch} from 'redux';\r\nimport {\r\n    changeEditMode,\r\n    CounterActionsType,\r\n    increaseCurrentValue,\r\n    nullifyCurrentValue,\r\n    setError,\r\n    setLimitValues\r\n} from '../../redux/counterActions';\r\nimport {Settings} from '../Settings/Settings';\r\n\r\nexport const CounterWithSettingsContainer: React.FC = () => {\r\n    const {\r\n        currentValue,\r\n        maxValue,\r\n        startValue,\r\n        editMode,\r\n        error\r\n    } = useSelector((state: IGlobalState) => state.counter);\r\n\r\n    const dispatch = useDispatch<Dispatch<CounterActionsType>>();\r\n\r\n    const increaseValue = () => {\r\n        dispatch(increaseCurrentValue())\r\n    }\r\n    const resetValue = () => {\r\n        dispatch(nullifyCurrentValue())\r\n    }\r\n    const onEditorMode = () => {\r\n        dispatch(changeEditMode(true))\r\n    }\r\n    const offEditorMode = () => {\r\n        dispatch(changeEditMode(false))\r\n    }\r\n    const changeLimitValues = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newStartValue = startValue;\r\n        let newMaxValue = maxValue;\r\n        if (e.currentTarget.dataset.value) {\r\n            const trigger: string = e.currentTarget.dataset.value;\r\n            if (trigger === 'startValue') {\r\n                newStartValue = +e.currentTarget.value;\r\n            } else {\r\n                newMaxValue = +e.currentTarget.value;\r\n            }\r\n        }\r\n        dispatch(setLimitValues(newStartValue, newMaxValue));\r\n        if (newStartValue >= newMaxValue || (newStartValue < 0 && newMaxValue < 0)) {\r\n            dispatch(setError('startValue maxValue'));\r\n        } else if (newStartValue < 0) {\r\n            dispatch(setError('startValue'));\r\n        } else if (newMaxValue < 0) {\r\n            dispatch(setError('maxValue'));\r\n        } else {\r\n            dispatch(setError(''));\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            {editMode ?\r\n                <Settings error={error}\r\n                          startValue={startValue}\r\n                          maxValue={maxValue}\r\n                          offEditorMode={offEditorMode}\r\n                          onChangeLimitValues={changeLimitValues}\r\n                />\r\n                :\r\n                <CounterWithSettings currentValue={currentValue}\r\n                                     maxValue={maxValue}\r\n                                     startValue={startValue}\r\n                                     increaseValue={increaseValue}\r\n                                     resetValue={resetValue}\r\n                                     onEditorMode={onEditorMode}/>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {CounterWithSettingsContainer} from './components/CounterWithSettings/CounterWithSettingsContainer';\r\n\r\nfunction App() {\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <CounterWithSettingsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {CounterActionsType} from './counterActions';\r\n\r\nexport type CounterStateType = {\r\n    startValue: number\r\n    maxValue: number\r\n    currentValue: number\r\n    editMode: boolean\r\n    error: string | undefined\r\n}\r\n\r\nconst initialState: CounterStateType = {\r\n    startValue: 0,\r\n    maxValue: 5,\r\n    currentValue: 0,\r\n    editMode: false,\r\n    error: ''\r\n}\r\n\r\n\r\nexport const counterReducer = (state: CounterStateType = initialState, action: CounterActionsType): CounterStateType => {\r\n    switch (action.type) {\r\n        case 'counter/INCREASE_CURRENT_VALUE':\r\n            return {\r\n                ...state,\r\n                currentValue: state.currentValue + 1,\r\n\r\n            }\r\n        case 'counter/NULLIFY_CURRENT_VALUE':\r\n            return {\r\n                ...state,\r\n                currentValue: state.startValue\r\n            }\r\n        case 'counter/CHANGE_EDIT_MODE':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case 'counter/SET_LIMIT_VALUES':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                currentValue: action.payload.startValue,\r\n\r\n            }\r\n        case 'counter/SET_ERROR':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n    }\r\n    return state\r\n\r\n}","import {combineReducers, createStore} from 'redux';\r\nimport {counterReducer} from './counterReducer';\r\nimport {loadState, saveState} from '../utilits/localStorage-utilits';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n});\r\n\r\nexport type IGlobalState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, loadState());\r\n\r\nstore.subscribe(() => {\r\n    saveState(store.getState());\r\n})","import {IGlobalState} from '../redux/state';\r\n\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state:IGlobalState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './redux/state';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__bbmzS\",\"disabled\":\"SuperButton_disabled__24lI4\",\"red\":\"SuperButton_red__20zhL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formField\":\"SuperInputText_formField__g4Rjz\",\"errorField\":\"SuperInputText_errorField__3CRVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Counter_container__zwTEc\",\"valueField\":\"Counter_valueField__3NHys\",\"buttons\":\"Counter_buttons__35Dzo\",\"messageField\":\"Counter_messageField__2_yfc\",\"maxValue\":\"Counter_maxValue__zobGS\",\"error\":\"Counter_error__2nNXP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Settings_container__SgMb7\",\"label\":\"Settings_label__1kQWC\"};"],"sourceRoot":""}